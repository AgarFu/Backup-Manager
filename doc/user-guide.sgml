<!DOCTYPE debiandoc PUBLIC "-//DebianDoc//DTD DebianDoc//EN" [
  <!-- include version information so we don't have to hard code it
       within the document -->
  <!ENTITY % versiondata SYSTEM "version.ent"> %versiondata;
  <!-- common, language independent entities -->
  <!ENTITY % commondata  SYSTEM "common.ent" > %commondata;

  <!-- if you are translating this document, please notate the CVS
       revision of the original developer's reference in cvs-en-rev -->
  <!-- <!ENTITY cvs-en-rev "X.YZW"> -->

  <!-- how to mark a section that needs more work -->
  <!ENTITY FIXME "<em>FIXME:</em>&nbsp;">

]>

<!-- Template of a configuration key description

     Please, follow this template for *each* configuration key
     this will allow us to make a nice appendix later, think to our 
     users ;-)

<sect1 id="BM_MYCONFIGURATION_KEY"><tt>BM_MYCONFIGURATION_KEY</tt>

<p>
<em>Type: TYPE, default: <tt>DEFAULT</tt>.</em>

<p>
Description

<p>
Example:

<example>
</example>

-->

<debiandoc>
	<book>
		<title>&bmngr; &bmngr-version; User Guide

		<author>Alexis Sukrieh
		
		<version>&version; - &date-en; 

		<copyright>
			<copyrightsummary>
copyright &copy; 2005 Alexis Sukrieh
			</copyrightsummary>

	<p>
This user guide is free software; you may redistribute it and/or modify it
under the terms of the GNU General Public License as published by the
Free Software Foundation; either version 2, or (at your option) any
later version.
	<p>
This is distributed in the hope that it will be useful, but
<em>without any warranty</em>; without even the implied warranty of
was merchantability or fitness for a particular purpose.  See the GNU
General Public License for more details.
	<p>
A copy of the GNU General Public License is available on the World Wide
Web at <url id="&url-gpl;" name="the GNU web site">.  You can also obtain 
it by writing to the &fsf-addr;.

<toc detail="sect1">

<chapt id="about">About this manual

<sect id="about-scope">Scope
<p>
&bmngr; is a system tool designed to hanlde backups. It is written with
simplicity in mind. 

<p>
If you want to handle a couple of tarballs, reading the
default configuration file might be enough to understand the main design.
On the other hand, if you want to know more about the global design of the
program, how to write your own backup methods or even look at some real life
examples, this guide is for you.

<p>
This document describes the main design of the software and gives informations
about supported configuration keys. Every backup methods are described, with
a sample configuration file as illustration. Whenever possible, advices and best
practices are given. 

<p>
This manual also describes every configuration variables supported in the
version &bmngr-version;, these are available in appendices for a quick reference.

<sect id="about-version">Version

<p>
This is the first version of this document, it was first released with 
the release 0.6 of &bmngr;.


<sect id="about-authors">Authors
<p>
The first version of this document was made in late 2005, by Alexis Sukrieh.

<p>
While the author of this document has tried hard to avoid typos and other 
errors, these do still occur. If you discover an error in this manual or if
you want to give any comments, suggestions, or criticisms please send an 
email to the development list, backup-manager-devel@backup-manager.org, or submit
a bug report against the "Documentation" product, in the bug tracking system.

<chapt id="design">Repository and Archives

<p>
&bmngr; stores <em>archives</em> it builds in a <em>repository</em>.
<em>Archives</em> are built by using a <em>backup method</em>. 

<sect id="archive-repo">The Repository

<!-- -->
<sect1 id="BM_REPOSITORY_ROOT"><tt>BM_REPOSITORY_ROOT</tt>

<p>
<em>Type: string, default: <tt>/var/archives</tt>.</em>

<p>
The repository is the place in your filesystem
where every archives are stored.
This is a particular place for &bmngr;, it will be cleaned during backup
sessions: archives older than the authorized lifetime will be purged.
If the repository does not exist, it will be created at runtime.

<p>
Isolating the repository on a dedicated partition is a good idea. This can
prevent the repository from eating all the disk space of the partition.
With a bad configuration file, backup sessions can lead to huge archives, 
for many reasons, so take care).

<p>
Example:

<example>
export BM_REPOSITORY_ROOT="/var/archives"
</example>

<sect1 id="BM_REPOSITORY_SECURE"><tt>BM_REPOSITORY_SECURE</tt>

<p>
<em>Type: boolean, default: <tt>true</tt>.</em>

<p>
For security reasons, the repository can be accessible by a specific user/group
pair. This will prevent the archives from being readable (and writable) by any user
in the system. This mode is enabled by default (owned by <tt>root:root</tt>).

<p>
To enable this mode, set the configuration key <tt>BM_REPOSITORY_SECURE</tt> 
to <tt>yes</tt>, then update <tt>BM_REPOSITORY_USER</tt> and
<tt>BM_REPOSITORY_GROUP</tt> to your needs.

<p>
Example:

<example>
export BM_REPOSITORY_SECURE="true"
export BM_REPOSITORY_USER="root"
export BM_REPOSITORY_GROUP="root"
</example>

<sect id="archives">Archives

<p>
<em>Archives are produced by backup methods, they can be virtually anything, but
will always be named like the following: <tt>prefix-name-date.filetype</tt>.
An archive is a file that contains data, it can be compressed or not, in a binary
form or not.</em>

<sect1 id="BM_ARCHIVE_PURGEDUPS"><tt>BM_ARCHIVE_PURGEDUPS</tt>

<p>
<em>Type: boolean, default: <tt>true</tt>.</em>

<p>
If disk usage matters in your backup strategy, you might find useful to use
&bmngr;'s duplicates purging feature. When an archive is generated, &bmngr;
looks at the previous versions of this archive. 
If it finds that a previous archive is the same file as the one it
has just built, the previous one is replaced by a symlink to the new one.
This is useful if you don't want to have twice the same archive in the
repository.

<p>
Example:

<example>
export BM_ARCHIVE_PURGEDUPS="true"

# ls -l /var/archives
wrw-rw---- 1 root root  138 2005-11-15 10:46 host-etc.20051115.tar.gz
wrwxrwxrwx 1 root root   51 2005-11-17 10:31 host-etc.20051116.tar.gz -> /var/archives/host-etc.20051117.tar.gz
-rw-rw---- 1 root root  137 2005-11-17 10:31 host-etc.20051117.tar.gz
</example>

<sect1 id="BM_ARCHIVE_TTL"><tt>BM_ARCHIVE_TTL</tt>

<p>
<em>Type: integer, default: <tt>5</tt>.</em>

<p>
One of the main concept behind the handling of the repository is to purge
deprecated archives automatically. The purge session is always performed
when you launch &bmngr;. During this phase, every archives older than the
authorized lifetime are droped.

<p>
Example:

<example>
export BM_ARCHIVE_TTL="5"
</example>

<sect1 id="BM_ARCHIVE_PREFIX"><tt>BM_ARCHIVE_PREFIX</tt>

<p>
<em>Type: string, default: <tt>$HOSTNAME</tt>.</em>

<p>
This is the prefix used for naming archives.

<p>
Example:

<example>
export BM_ARCHIVE_PREFIX="$HOSTNAME"

# echo $HOSTNAME
ouranos
# ls /var/archives
ouranos-20051123.md5 
ouranos-usr-local-src.20051123.tar.gz
ouranos-etc.20051123.tar.gz
</example>

<chapt id="methods">Backup Methods

<p>
The core feature of &bmngr; is to make archives, for doing this, a
<em>method</em> is used. Each method can require a set of configuration keys.
We will describe here every method supported in the version &version;.

<p>
The method you choose must be defined in the configuration key
<tt>BM_ARCHIVE_METHOD</tt>. You can put here a list of all the different methods 
you want to use. Take care to put every configuration keys needed by all the 
methods you choose.

<p>
A couple of other configuration keys may be needed depending on the method you
choose. 

<p>
Example:

<example>
export BM_ARCHIVE_METHOD="tarball-incremental mysql"
</example>

<sect id="tarball">Tarballs

<sect1 id="tarball-desc">Description

<p>
<em>Method name: <tt>tarball</tt>, configuration key prefix: <tt>BM_TARBALL</tt>.</em>

<p>
If all you want to do is to handle a couple of tarballs of your file system, you
can use this method.  This method takes a list of directories
and builds the corresponding tarballs.  
This method is the default one, this is the easiest to use, it just
builds tarballs as you could do with your own tar script. Its main drawback is
to eat a lot of disk space: archives can be big from a day to another, even if
there is no changes in their content. See the <tt>tarball-incremental</tt>
method if you want to optimize archives' size.

<p>
A couple of options are available: the name format
of the archive, the compression type (gzip, zip, bzip2, none) and the
facility to dereference symlinks when building the tarball.

<sect1 id="BM_TARBALL_NAMEFORMAT"><tt>BM_TARBALL_NAMEFORMAT</tt>
<p>
This configuration key defines how to perform the naming of the archive. Two
values are possible:

<list>
<item><tt>long</tt>: the name will be made with the absolute path of the directory
(eg: <tt>var-log-apache</tt> for <tt>/var/log/apache</tt>).
<item><tt>short</tt>: the name will just contains the directory (eg:
<tt>apache</tt> for <tt>/var/log/apache</tt>). 
</list>

<p>
Suggested value: <tt>long</tt>.

<sect1 id="BM_TARBALL_FILETYPE"><tt>BM_TARBALL_FILETYPE</tt>

<p>
<em>Type: enum(tar, tar.gz, tar.bz2, zip), default: <tt>tar.gz</tt>.</em>

<p>
Basically, this configuration key defines the filetype of the resulting archive.
In a way, it defines which compressor to use (zip, gzip or bzip2).
Here are the supported values: <tt>tar</tt>, <tt>tar.gz</tt>, <tt>tar.bz2</tt>,
<tt>zip</tt>. Note that depending on the filetype you choose, you will have to
make sure you have the corresponding compressor.

<p>
For the best compression rate, choose <tt>tar.bz2</tt>.

<sect1 id="BM_TARBALL_DUMPSYMLINKS"><tt>BM_TARBALL_DUMPSYMLINKS</tt>

<p>
<em>Type: boolean, default: <tt>true</tt>.</em>

<p>
It is possible, when generating the tarball (or the zip file) to dereference the
symlinks. If you enable this feature, every symbolic links in the file system
will be replaced in the archive by the file the point to. Use this feature with
care, it can quickly leads to huge archive, or even worse: if you have a
circular symlink somewhere, this will lead to an infinite archive!

<p>
In most of the cases, you should not use this feature.

<sect1 id="BM_TARBALL_DIRECTORIES"><tt>BM_TARBALL_DIRECTORIES</tt>

<p>
<em>Type: space-separated list, default: <tt>""</tt>.</em>

<p>
You certainly want to backup something, don't you? So here is the place where
you put that precious list of locations. 

<p>
Example: 

<example>
export BM_TARBALL_DIRECTORIES="/etc /home /var/log/apache"
</example>

<sect id="tarballinc">Incremental tarballs

<p>
<em>Method name: <tt>tarball-incremental</tt>, configuration keys prefix:
<tt>BM_TARBALLINC</tt>.</em>

<p>
If you want to handle tarballs without wasting disk space, you should use this
method. The concept of this method is simple: You choose a frequency when a full
backup is made (exactly like the one made by the tarball mehod). All the days
between two full backups, archives contain only the files that have changed from
the previous archive.

<p>
For instance, let's say you want to backup /home with this method. Your /home
directory is composed by two sub-directories: /home/foo and /home/bar.
You choose a weekly frequency and say that monday will be the "fullbackup" day.
Obviously, you will have a full tarball of /home on monday. 
Then, if a file changed inside /home/foo and if /home/bar
remains unchanged, tuesday's archive will only contains the modified files of
/home/foo. Using this method will save a lot of disk space.

<p>
This method uses all the tarball's configuration keys and adds two more. One to
define the kind of frequency, the other to choose on which day should the full
backups be made. 

<sect1 id="BM_TARBALLINC_MASTERDATETYPE"><tt>BM_TARBALLINC_MASTERDATETYPE</tt>

<p>
<em>Type: enum(weekly, monthly), default: <tt>weekly</tt>.</em>

<p>
This is the type of frequency you want to use. If you choose <tt>weekly</tt>,
you'll have to choose a day number between 1 and 7 for the
BM_TARBALLINC_MASTERDATEVALUE configuration key, if you choose <tt>monthly</tt>,
the day number will be between 1 and 31.


<sect1 id="BM_TARBALLINC_MASTERDATEVALUE"><tt>BM_TARBALLINC_MASTERDATEVALUE</tt>

<p>
<em>Type: integer, default: <tt>1</tt>.</em>

<p>
The number of the day when making full backups. Note that its meaning directly
depends on the <tt>BM_TARBALLINC_MASTERDATETYPE</tt>. 
For instance, 1 means <em>"monday"</em> if you
choose a weekly frequency, but it means <em>"the first day of the month"</em>
if you choose a monthly frequency.

<sect1 id="mysql">MySQL databases
<sect1 id="svn">Subversion repositories
<sect1 id="pipe">Generic methods

<chapt id="exports">Exports
<sect id="media">Media
<sect id="network">Network
</book>

</debiandoc>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:nil
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-declaration:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
